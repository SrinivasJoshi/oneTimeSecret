name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Set up Docker Buildx for better caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Create a temporary .env file for testing
      - name: Create test environment file
        run: |
          cp .env.example .env
      
      # Build the Docker images
      - name: Build Docker images
        run: docker compose build
      
      # Start the containers
      - name: Start Docker containers
        run: docker compose up -d
      
      # Wait for the application to be ready
      - name: Wait for app to be ready
        run: |
          echo "Waiting for application to start..."
          timeout=60
          counter=0
          while ! curl -s http://localhost:80/health > /dev/null; do
            if [ $counter -eq $timeout ]; then
              echo "Timed out waiting for application to start"
              docker compose logs
              exit 1
            fi
            echo "Still waiting... ($counter/$timeout)"
            sleep 2
            counter=$((counter+1))
          done
          echo "Application is up and running!"
      
      # Setup Node.js for Cypress (using actions/setup-node instead of npm global install)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      # Install Cypress
      - name: Install Cypress
        working-directory: ./frontend
        run: npm install cypress --no-save
      
      # Run Cypress tests
      - name: Run Cypress tests
        working-directory: ./frontend
        run: npx cypress run
      
      # Stop containers
      - name: Stop Docker containers
        if: always()
        run: docker compose down
  
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-test
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=accept-new ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} '
            cd ${{ secrets.APP_DIR }} &&
            git pull origin ${{ github.ref_name }} &&
            docker-compose down &&
            docker-compose up -d --build
          '